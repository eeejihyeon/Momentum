// 0에서 사용자가 지정한 숫자까지의 범위에서 랜덤 한 숫자를 찾으세요. (범위는 0 이상 입력값 이하가 됩니다.)
// 범위에는 음수가 포함될 수 없습니다.
// 실시간으로 범위 값을 업데이트해야 합니다.
// 유저가 숫자를 선택한 후에 게임을 플레이할 수 있습니다.
// 유저에게 게임의 승패를 알려야 합니다.


먼저 html 요소들을 js에서 사용할 수 있도록 선언해 줍니다.
e.preventDefault();
입력이 제출되며 브라우저가 초기화되는 고유 동작을 막기 위한 코드입니다.

const guessInput = guessForm.querySelector("input");
사용자가 선택한 숫자를 입력하는 요소를 js에서 사용할 수 있게 선언해 줍니다.

guessInput과 maxNumber이 모두 입력이 없어 값이 비었을 땐 handleGuessSubmit함수를 빠져나옵니다.

  if(input.value === "" && generateNbr.value === "") {
  return;
}

const max = maxNumber.value;
maxNumber의 값을 변수 max로 선언해 줍니다.
(5)

const random = Math.ceil(Math.random() * max);
Math.random()함수로 랜덤으로 숫자를 생성합니다. 이때 Math.random()은 0에서 1보다 작은 숫자를 생성하므로 숫자가 생성되는 범위는 max를 넘지 못합니다.
필요한 값은 정수 형태의 숫자이기 때문에 Math.ceil()함수를 통해 값을 올림하고 소수점 이하를 없애 줍니다.
여기서 버림이 아닌 올림을 하는 이유는 올림을 함으로써 max까지의 수를 얻을 수 있기 때문입니다.
(6)

const userGuess = parseInt(guessInput.value, 10);
<input>과 <form>태그를 통해 제출된 값은 문자열형태로 저장됩니다. guessInput.value의 타입은 현재 문자열입니다. 위 코드는 문자열 형태의 입력 값을 숫자 비교를 하기 위해 정수 형태로 바꿔주는 코드입니다.
parseInt()함수는 문자열을 정수 형태로 바꿔주는 함수입니다. 맨 마지막의 10은 10진수로 변경하라는 의미입니다.
(7)

게임의 결과를 출력하기 위한 코드입니다. html에서 작성해 둔 span태그의 innerHTML프로퍼티를 사용해 출력할 내용을 작성해 줍니다.

const resultSpan = resultSpan.innerHTML = `You chose: ${userGuess}, the machine chose: ${random}. </br> <strong> ${userGuess === random ? "You won!" : "You lost!"}</strong>`